@page "/todo/{id:int}"
@page "/todo"
@inject NavigationManager NavigationManager
@using global::Shared
@inject HttpClient Http

@if(Id is null)
{
<PageTitle>Add a new ToDo</PageTitle>
<h3>Add a new ToDo</h3>
}
else
{
    <PageTitle>Edit @todo.Name</PageTitle>
    <h3>Edit @todo.Name</h3>
}

<EditForm Model="todo" OnValidSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="todo.Name" class ="form-control"/>
    </div>
        <div>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="todo.Description" class ="form-control"/>
    </div>
        <div>
        <label for="date">Date</label>
        <InputDate Type="InputDateType.Date" class="form-eliment jds-d-inline-block jds-max-width150" id="date" @bind-Value="todo.Date" />
    </div><br/>
    <button type="submit" class="btn btn-primary">Save</button>
    @if(Id is not null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteToDo">Delete</button>
    }
</EditForm>

@code{
    [Parameter]
    public int? Id{get; set;}
    Todo todo = new Todo{Name = "New ToDo"};
        protected override async Task OnParametersSetAsync()
        {
            if(Id is not null)
            {
                var result = await Http.GetFromJsonAsync<Todo>($"api/todo/{Id}");
                    if(result is not null){
                        todo = result;
                    }
            }
        }
        async Task DeleteToDo()
        {
            await Http.DeleteAsync($"api/todo/{Id}");
            NavigationManager.NavigateTo("/todos");


        }

        async Task HandleSubmit()
        {
        if(Id is null)
        {
              await Http.PostAsJsonAsync("api/todo", todo);  
        }
        else
        {
            await Http.PutAsJsonAsync($"api/todo/{Id}", todo);
        }
    }

}